{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OEkxq8752xPb",
        "outputId": "b8ee35bc-2f3e-40f6-f7b9-d83298934b0b"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: kaggle in /anaconda/lib/python3.10/site-packages (1.6.12)\n",
            "Requirement already satisfied: python-slugify in /anaconda/lib/python3.10/site-packages (from kaggle) (8.0.4)\n",
            "Requirement already satisfied: six>=1.10 in /anaconda/lib/python3.10/site-packages (from kaggle) (1.16.0)\n",
            "Requirement already satisfied: requests in /anaconda/lib/python3.10/site-packages (from kaggle) (2.28.1)\n",
            "Requirement already satisfied: bleach in /anaconda/lib/python3.10/site-packages (from kaggle) (6.0.0)\n",
            "Requirement already satisfied: tqdm in /anaconda/lib/python3.10/site-packages (from kaggle) (4.65.0)\n",
            "Requirement already satisfied: certifi>=2023.7.22 in /anaconda/lib/python3.10/site-packages (from kaggle) (2024.2.2)\n",
            "Requirement already satisfied: python-dateutil in /anaconda/lib/python3.10/site-packages (from kaggle) (2.8.2)\n",
            "Requirement already satisfied: urllib3 in /anaconda/lib/python3.10/site-packages (from kaggle) (1.26.15)\n",
            "Requirement already satisfied: webencodings in /anaconda/lib/python3.10/site-packages (from bleach->kaggle) (0.5.1)\n",
            "Requirement already satisfied: text-unidecode>=1.3 in /anaconda/lib/python3.10/site-packages (from python-slugify->kaggle) (1.3)\n",
            "Requirement already satisfied: charset-normalizer<3,>=2 in /anaconda/lib/python3.10/site-packages (from requests->kaggle) (2.0.4)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /anaconda/lib/python3.10/site-packages (from requests->kaggle) (3.4)\n",
            "Warning: Looks like you're using an outdated API Version, please consider updating (server 1.6.14 / client 1.6.12)\n",
            "Dataset URL: https://www.kaggle.com/datasets/guare13/handwritten-letters-recognition\n",
            "License(s): CC0-1.0\n",
            "handwritten-letters-recognition.zip: Skipping, found more recently modified local copy (use --force to force download)\n",
            "Archive:  handwritten-letters-recognition.zip\n",
            "replace test_letters/letter_0.png? [y]es, [n]o, [A]ll, [N]one, [r]ename: ^C\n"
          ]
        }
      ],
      "source": [
        "!pip install kaggle\n",
        "!kaggle datasets download -d guare13/handwritten-letters-recognition\n",
        "!unzip handwritten-letters-recognition.zip"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 95,
      "metadata": {
        "id": "3jI3o7ob3JB3"
      },
      "outputs": [],
      "source": [
        "import torch\n",
        "import tensorflow as tf\n",
        "import os\n",
        "import cv2\n",
        "import imghdr\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "from sklearn.preprocessing import LabelBinarizer\n",
        "from itertools import chain\n",
        "import random\n",
        "import shutil\n",
        "from sklearn.model_selection import train_test_split\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "from torch.utils.data import Dataset, DataLoader\n",
        "from PIL import Image\n",
        "from torchvision import transforms\n",
        "import torch.nn.functional as F"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 96,
      "metadata": {
        "id": "cJNXViv5Brlp"
      },
      "outputs": [],
      "source": [
        "train = pd.read_csv('written_letters_train.csv')\n",
        "validation = pd.read_csv('written_letters_validation.csv')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 97,
      "metadata": {
        "id": "XseG9YK_BUQA"
      },
      "outputs": [],
      "source": [
        "characters = sorted(set(\"\".join(train['nombre'].astype(str))))\n",
        "char_to_label = {char: idx for idx, char in enumerate(characters)}\n",
        "label_to_char = {idx: char for char, idx in char_to_label.items()}"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 98,
      "metadata": {
        "id": "igb64Qje3Ox6"
      },
      "outputs": [],
      "source": [
        "path_val = \"valid_letters\"\n",
        "path_test = \"test_letters\"\n",
        "path_train = \"train_letters\""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 99,
      "metadata": {
        "id": "sn9jLhOh7HId"
      },
      "outputs": [],
      "source": [
        "class DataGenerator(Dataset):\n",
        "    def __init__(self, dataframe, path, char_map, img_size=(14, 10), transform=None):\n",
        "        self.dataframe = dataframe\n",
        "        self.path = path\n",
        "        self.char_map = char_map\n",
        "        self.img_size = img_size\n",
        "        self.transform = transform\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.dataframe)\n",
        "\n",
        "    def __getitem__(self, idx):\n",
        "        img_path = self.dataframe['id'].values[idx]\n",
        "        img = cv2.imread(os.path.join(self.path, img_path), cv2.IMREAD_GRAYSCALE)\n",
        "        img = cv2.resize(img, self.img_size)\n",
        "        img = img / 255.0\n",
        "        if self.transform:\n",
        "            img = self.transform(img)\n",
        "        img = torch.tensor(img, dtype=torch.float32).unsqueeze(0)\n",
        "        \n",
        "        text = str(self.dataframe['nombre'].values[idx])\n",
        "        label = torch.tensor([self.char_map[char] for char in text], dtype=torch.long)\n",
        "        return img, label"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 100,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Transformación para las imágenes\n",
        "transform = transforms.Compose([\n",
        "    transforms.ToTensor()\n",
        "])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 101,
      "metadata": {
        "id": "rX7vamtb8xpd"
      },
      "outputs": [],
      "source": [
        "train_generator=DataGenerator(train,path_train,char_to_label)\n",
        "validation_generator=DataGenerator(validation,path_val,char_to_label)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 102,
      "metadata": {},
      "outputs": [],
      "source": [
        "train_loader = DataLoader(train_generator, batch_size=128, shuffle=True)\n",
        "validation_loader = DataLoader(validation_generator, batch_size=128, shuffle=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 103,
      "metadata": {
        "id": "4zi22bXqCC0n"
      },
      "outputs": [],
      "source": [
        "# Defineix el model\n",
        "class SimpleCNN(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(SimpleCNN, self).__init__()\n",
        "        \"\"\"\n",
        "        Entren imatges amb 3 canals de color (RGB) i amb aquesta capa convolucional\n",
        "        s'estreuen característiques loclas de la imatge detectant patrons com bordes,\n",
        "        textures i altres detalls que poden ser importants.\n",
        "        \"\"\"\n",
        "        self.conv1 = nn.Conv2d(1, 16, kernel_size=3, stride=1, padding=1)\n",
        "        \"\"\"\n",
        "        El max pooling redueix la dimensionalitat dels mapas de característiques,\n",
        "        disminuint la mida de les imatges i retenint les característiques més importants\n",
        "        Això ajuda a reduir el sobreajustament i millora l'eficàcia computacional.\n",
        "        \"\"\"\n",
        "        self.pool = nn.MaxPool2d(kernel_size=2, stride=2, padding=0)\n",
        "        \n",
        "        self.dropout = nn.Dropout(0.5)\n",
        "        \"\"\"\n",
        "        Les següents dues capes s'ecarreguen de la classificació final. Transformen\n",
        "        les característiques extretes per les capas convolucionals i de pooling a les\n",
        "        propietats de les diferents classes (lletres).\n",
        "        \"\"\"\n",
        "        self.fc1 = nn.Linear(16 * 7 * 5, 64)\n",
        "        self.fc2 = nn.Linear(64, 29)  # 29 perquè hi ha 29 caràcters a l'alfabet\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.pool(F.relu(self.conv1(x)))\n",
        "        x = x.view(-1, 16 * 7 * 5)\n",
        "        x = F.relu(self.fc1(x))\n",
        "        x = self.fc2(x)\n",
        "        return x\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 104,
      "metadata": {
        "id": "9IzlVbOiCcDA"
      },
      "outputs": [],
      "source": [
        "# Instancia el model, defineix la pèrdua i l'optimitzador\n",
        "model = SimpleCNN()\n",
        "criterion = nn.CrossEntropyLoss()\n",
        "optimizer = optim.SGD(model.parameters(), lr=0.005, momentum=0.9)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 105,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R39SyclsMBZf",
        "outputId": "3d2712b4-8382-405c-bc55-8f97814348a3"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 1/15, Train Loss: 1.3154, Train Acc: 0.6422, Test Loss: 0.7560, Test Acc: 0.7924\n",
            "Epoch 2/15, Train Loss: 0.6233, Train Acc: 0.8416, Test Loss: 0.5826, Test Acc: 0.8560\n",
            "Epoch 3/15, Train Loss: 0.5372, Train Acc: 0.8676, Test Loss: 0.5280, Test Acc: 0.8730\n",
            "Epoch 4/15, Train Loss: 0.4894, Train Acc: 0.8810, Test Loss: 0.4896, Test Acc: 0.8854\n",
            "Epoch 5/15, Train Loss: 0.4557, Train Acc: 0.8914, Test Loss: 0.4609, Test Acc: 0.8953\n",
            "Epoch 6/15, Train Loss: 0.4306, Train Acc: 0.8983, Test Loss: 0.4418, Test Acc: 0.9023\n",
            "Epoch 7/15, Train Loss: 0.4112, Train Acc: 0.9035, Test Loss: 0.4376, Test Acc: 0.9017\n",
            "Epoch 8/15, Train Loss: 0.3966, Train Acc: 0.9073, Test Loss: 0.4167, Test Acc: 0.9095\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Bad pipe message: %s [b'\\x87\\xe6\\xf5\\xf1\\x08\\xf6We\\xe8\\x7f\\xfe\\x1c[\\x06\\xde\\xa4(n \\x1e\\xc1\\xcbUM\\x14\\xd3B\\x9c\\x0c\\xd8\\xa9?\\xcaU!#\\x14Qp', b'\\xba\\xc2\\xe1KK\\xbbR\\xa7\\xc7|\\x00\\x08\\x13\\x02\\x13\\x03\\x13\\x01\\x00\\xff\\x01\\x00\\x00\\x8f\\x00\\x00\\x00\\x0e\\x00\\x0c\\x00\\x00\\t127.0.0.1\\x00\\x0b\\x00\\x04\\x03\\x00\\x01\\x02\\x00\\n\\x00\\x0c\\x00\\n\\x00\\x1d\\x00\\x17\\x00\\x1e\\x00\\x19\\x00\\x18\\x00#\\x00\\x00\\x00\\x16\\x00\\x00\\x00\\x17\\x00\\x00\\x00\\r\\x00\\x1e\\x00\\x1c\\x04\\x03\\x05\\x03\\x06\\x03\\x08\\x07\\x08\\x08\\x08', b'\\n\\x08\\x0b\\x08\\x04\\x08\\x05\\x08']\n",
            "Bad pipe message: %s [b'\\x01\\x05\\x01\\x06\\x01']\n",
            "Bad pipe message: %s [b'\\r&r\\xd4 \\xea\\xd3\\xbcL\\x9dw\\xf3\\xfc\\xf1\\x0e()\\x9c ]\\x87\\xd5\\x84\\xb7U\\x89l+\\x05v\\x1d\\x9c@\\xfb\\x05\\xd2\\xe8\\xec\\x15vE\\xfd\\xfal\\xa8\\xc5\\x8d\\xae\\xca\"d\\x00\\x08\\x13\\x02\\x13\\x03\\x13\\x01\\x00\\xff\\x01\\x00\\x00\\x8f\\x00\\x00\\x00\\x0e\\x00\\x0c\\x00\\x00\\t127.0.0.1\\x00\\x0b\\x00\\x04\\x03\\x00\\x01\\x02\\x00\\n\\x00\\x0c\\x00\\n\\x00\\x1d\\x00\\x17\\x00\\x1e\\x00\\x19\\x00\\x18\\x00#\\x00\\x00\\x00\\x16\\x00\\x00\\x00\\x17\\x00\\x00\\x00\\r\\x00\\x1e\\x00\\x1c\\x04\\x03\\x05\\x03\\x06\\x03\\x08', b'\\x08\\x08\\t\\x08\\n\\x08']\n",
            "Bad pipe message: %s [b'\\x04\\x08\\x05\\x08\\x06\\x04\\x01\\x05\\x01\\x06']\n",
            "Bad pipe message: %s [b'']\n",
            "Bad pipe message: %s [b'\\x03\\x02\\x03\\x04\\x00-\\x00\\x02\\x01\\x01\\x003\\x00&\\x00$\\x00\\x1d\\x00 \\x119y\\x81\\xae9\\xa7\\xeex\\xca\\x9d\\xa3Dr\\x13\\xbbA~|K\\xf4k']\n",
            "Bad pipe message: %s [b'\\xa9\\xd6\\xeb\\xb0\\x05', b\"\\xc6\\xdb\\xb8T\\xa6\\xa2w%0?K\\x00\\x00|\\xc0,\\xc00\\x00\\xa3\\x00\\x9f\\xcc\\xa9\\xcc\\xa8\\xcc\\xaa\\xc0\\xaf\\xc0\\xad\\xc0\\xa3\\xc0\\x9f\\xc0]\\xc0a\\xc0W\\xc0S\\xc0+\\xc0/\\x00\\xa2\\x00\\x9e\\xc0\\xae\\xc0\\xac\\xc0\\xa2\\xc0\\x9e\\xc0\\\\\\xc0`\\xc0V\\xc0R\\xc0$\\xc0(\\x00k\\x00j\\xc0#\\xc0'\\x00g\\x00@\\xc0\\n\\xc0\\x14\\x009\\x008\\xc0\\t\\xc0\\x13\\x003\\x002\\x00\\x9d\\xc0\\xa1\\xc0\\x9d\\xc0Q\\x00\\x9c\\xc0\\xa0\\xc0\\x9c\\xc0P\\x00=\\x00<\\x005\\x00/\\x00\\x9a\\x00\\x99\\xc0\\x07\\xc0\\x11\\x00\\x96\\x00\\x05\\x00\\xff\\x01\\x00\\x00j\\x00\\x00\\x00\\x0e\\x00\\x0c\\x00\\x00\\t127.0.0.1\\x00\\x0b\\x00\\x04\\x03\\x00\\x01\\x02\\x00\\n\\x00\\x0c\\x00\\n\\x00\\x1d\\x00\\x17\\x00\\x1e\\x00\\x19\\x00\\x18\\x00#\\x00\\x00\\x00\\x16\\x00\\x00\\x00\\x17\\x00\\x00\\x00\\r\\x000\\x00.\\x04\\x03\\x05\\x03\\x06\\x03\\x08\\x07\\x08\\x08\\x08\\t\\x08\\n\\x08\\x0b\\x08\\x04\\x08\\x05\\x08\\x06\\x04\\x01\\x05\\x01\\x06\\x01\"]\n",
            "Bad pipe message: %s [b'/\\x9f\\x91\\xbb\\x16\\xbbuF\\xc9MG\\x11@\\xcf3\\xa6\"\\x81\\x00\\x00\\xa6\\xc0,\\xc00\\x00\\xa3\\x00\\x9f\\xcc\\xa9\\xcc\\xa8\\xcc\\xaa\\xc0', b\"\\xad\\xc0\\xa3\\xc0\\x9f\\xc0]\\xc0a\\xc0W\\xc0S\\xc0+\\xc0/\\x00\\xa2\\x00\\x9e\\xc0\\xae\\xc0\\xac\\xc0\\xa2\\xc0\\x9e\\xc0\\\\\\xc0`\\xc0V\\xc0R\\xc0$\\xc0(\\x00k\\x00j\\xc0s\\xc0w\\x00\\xc4\\x00\\xc3\\xc0#\\xc0'\\x00g\\x00@\\xc0r\\xc0v\\x00\\xbe\\x00\\xbd\\xc0\\n\\xc0\\x14\\x009\\x008\\x00\\x88\\x00\\x87\\xc0\\t\\xc0\\x13\\x003\\x002\\x00\\x9a\\x00\\x99\\x00E\\x00D\\xc0\\x07\\xc0\\x11\\xc0\\x08\\xc0\\x12\\x00\\x16\\x00\\x13\\x00\\x9d\\xc0\\xa1\\xc0\\x9d\\xc0Q\\x00\\x9c\\xc0\\xa0\\xc0\\x9c\\xc0P\\x00=\\x00\\xc0\\x00<\\x00\\xba\\x005\\x00\\x84\\x00/\\x00\\x96\\x00A\\x00\\x05\\x00\\n\\x00\\xff\\x01\\x00\\x00j\\x00\\x00\\x00\\x0e\\x00\\x0c\\x00\\x00\\t127.0.0.1\\x00\\x0b\\x00\"]\n",
            "Bad pipe message: %s [b'<\\x9a\\xf3W\\x9c?:SA\\xea\\xd1\\xbb\\xdb\\xd9\\x86\\x80<Q\\x00\\x00>\\xc0\\x14\\xc0\\n\\x009\\x008\\x007\\x006\\xc0\\x0f\\xc0\\x05\\x005\\xc0\\x13\\xc0\\t\\x003\\x002\\x001\\x000\\xc0\\x0e\\xc0\\x04\\x00/\\x00\\x9a\\x00\\x99\\x00\\x98\\x00\\x97\\x00\\x96\\x00\\x07\\xc0\\x11\\xc0\\x07\\xc0\\x0c\\xc0\\x02\\x00\\x05\\x00\\x04\\x00\\xff\\x02\\x01\\x00\\x00C\\x00\\x00\\x00\\x0e\\x00\\x0c\\x00\\x00\\t127.0.0.1\\x00\\x0b\\x00\\x04\\x03\\x00\\x01\\x02\\x00\\n\\x00\\x1c\\x00\\x1a\\x00\\x17\\x00\\x19\\x00\\x1c\\x00\\x1b\\x00\\x18\\x00\\x1a\\x00\\x16\\x00\\x0e\\x00\\r\\x00\\x0b\\x00\\x0c\\x00\\t\\x00']\n",
            "Bad pipe message: %s [b'\\x02\\x03', b'\\x02\\x01', b'\\x02\\x02']\n",
            "Bad pipe message: %s [b'#\\x00\\x00\\x00\\x0f\\x00\\x01\\x01\\x15']\n",
            "Bad pipe message: %s [b'\\x05\\x02\\x06']\n",
            "Bad pipe message: %s [b'\\x9f^d\\xbe\\xbd\\xedk`5Y\"\\xef\\x80\\xc1z\\xed\\x1ak\\x00\\x00\\xa2\\xc0\\x14\\xc0\\n\\x009\\x008\\x007\\x006\\x00\\x88\\x00\\x87\\x00\\x86\\x00\\x85\\xc0\\x19\\x00:\\x00\\x89\\xc0\\x0f\\xc0\\x05\\x005\\x00\\x84\\xc0\\x13\\xc0\\t\\x003\\x002\\x001\\x000\\x00\\x9a\\x00\\x99\\x00\\x98\\x00\\x97\\x00E\\x00D\\x00C\\x00B\\xc0\\x18\\x004\\x00\\x9b\\x00F\\xc0']\n",
            "Bad pipe message: %s [b'\\x00\\x02']\n",
            "Bad pipe message: %s [b'\\x04\\x00/\\x00\\x96\\x00A\\x00\\x07\\xc0\\x11\\xc0\\x07']\n",
            "Bad pipe message: %s [b'\\x98;\\xb9\\xd0\\x88Q\\x98\\x0e\\x8e\\xc5\\x14k[Q\\xb8\\xa7\\xeb\\x9a\\x00\\x00\\xa2\\xc0\\x14\\xc0\\n\\x009\\x008\\x007\\x006\\x00\\x88\\x00\\x87\\x00\\x86\\x00\\x85\\xc0\\x19\\x00:\\x00\\x89\\xc0\\x0f\\xc0\\x05\\x005\\x00\\x84\\xc0\\x13\\xc0\\t\\x003\\x002\\x001\\x000\\x00\\x9a\\x00\\x99\\x00\\x98\\x00\\x97\\x00E\\x00D\\x00C\\x00B\\xc0\\x18\\x004\\x00\\x9b\\x00F\\xc0\\x0e\\xc0\\x04\\x00/\\x00\\x96\\x00A\\x00\\x07\\xc0\\x11\\xc0\\x07\\xc0\\x16\\x00\\x18\\xc0\\x0c\\xc0\\x02\\x00\\x05\\x00\\x04\\xc0\\x12\\xc0\\x08\\x00\\x16\\x00\\x13\\x00\\x10\\x00\\r\\xc0\\x17\\x00\\x1b\\xc0\\r\\xc0\\x03\\x00\\n\\x00\\x15\\x00\\x12\\x00\\x0f\\x00\\x0c\\x00\\x1a\\x00\\t\\x00\\x14\\x00\\x11\\x00\\x19\\x00', b'\\x06\\x00\\x17\\x00\\x03\\xc0\\x10']\n",
            "Bad pipe message: %s [b'E_?\\xdcY~\\x1er\\xb9\\x93T\\xd3\\xcc\\xe0\\x9aR\\\\\\x19\\x00\\x00>\\xc0\\x14\\xc0\\n\\x009\\x008\\x007\\x006\\xc0\\x0f\\xc0\\x05\\x005\\xc0\\x13\\xc0\\t\\x003\\x002\\x001\\x000\\xc0\\x0e\\xc0\\x04\\x00/\\x00\\x9a\\x00\\x99\\x00\\x98\\x00\\x97\\x00\\x96\\x00\\x07\\xc0\\x11\\xc0', b'\\x0c\\xc0\\x02\\x00\\x05\\x00']\n",
            "Bad pipe message: %s [b'\\xff\\x02\\x01']\n",
            "Bad pipe message: %s [b\"$\\x7f\\xc8\\x86\\x04\\x07\\xf7\\xd2,2\\xb5x\\xf7\\xe0\\xe0\\xae\\xb8.\\x00\\x00\\x86\\xc00\\xc0,\\xc0(\\xc0$\\xc0\\x14\\xc0\\n\\x00\\xa5\\x00\\xa3\\x00\\xa1\\x00\\x9f\\x00k\\x00j\\x00i\\x00h\\x009\\x008\\x007\\x006\\xc02\\xc0.\\xc0*\\xc0&\\xc0\\x0f\\xc0\\x05\\x00\\x9d\\x00=\\x005\\xc0/\\xc0+\\xc0'\\xc0#\\xc0\\x13\\xc0\\t\\x00\\xa4\\x00\\xa2\\x00\\xa0\\x00\\x9e\\x00g\\x00@\\x00?\\x00>\\x003\\x002\\x001\\x000\\xc01\\xc0-\\xc0)\\xc0%\\xc0\\x0e\\xc0\\x04\\x00\\x9c\\x00<\\x00/\\x00\\x9a\\x00\\x99\\x00\\x98\\x00\\x97\\x00\\x96\\x00\\x07\\xc0\\x11\\xc0\\x07\\xc0\\x0c\\xc0\\x02\\x00\\x05\\x00\\x04\\x00\\xff\\x02\\x01\\x00\\x00g\\x00\\x00\\x00\\x0e\\x00\\x0c\\x00\\x00\\t127.0.0.1\\x00\\x0b\\x00\\x04\\x03\\x00\\x01\\x02\\x00\\n\\x00\\x1c\\x00\\x1a\\x00\\x17\\x00\\x19\\x00\\x1c\\x00\\x1b\\x00\\x18\\x00\\x1a\\x00\\x16\\x00\", b'\\r\\x00\\x0b\\x00\\x0c\\x00\\t\\x00\\n\\x00#\\x00\\x00']\n",
            "Bad pipe message: %s [b'\\xcbNQ\\xb1c\\x14\\xf8\\x16\\x90Z\\xca\\xe0>h=,\\x83\\x15\\x00\\x00\\xf4\\xc00\\xc0,\\xc0(\\xc0$\\xc0\\x14\\xc0\\n\\x00\\xa5\\x00\\xa3\\x00\\xa1\\x00\\x9f\\x00k\\x00j\\x00i\\x00h\\x009\\x008\\x007\\x006\\x00\\x88\\x00\\x87\\x00\\x86\\x00\\x85\\xc0\\x19\\x00\\xa7\\x00m\\x00:\\x00\\x89\\xc02\\xc0.\\xc0*\\xc0&\\xc0\\x0f\\xc0\\x05\\x00', b\"=\\x005\\x00\\x84\\xc0/\\xc0+\\xc0'\\xc0#\\xc0\\x13\\xc0\\t\\x00\\xa4\\x00\\xa2\\x00\\xa0\\x00\\x9e\\x00g\\x00@\\x00?\\x00>\\x003\\x002\\x001\\x000\\x00\\x9a\\x00\\x99\\x00\\x98\\x00\\x97\\x00E\\x00D\\x00C\\x00B\\xc0\\x18\\x00\\xa6\\x00l\\x004\\x00\\x9b\\x00F\\xc01\\xc0-\\xc0)\\xc0%\\xc0\\x0e\\xc0\\x04\\x00\\x9c\\x00<\\x00/\\x00\\x96\\x00A\\x00\\x07\\xc0\\x11\\xc0\\x07\\xc0\\x16\\x00\\x18\\xc0\\x0c\\xc0\\x02\\x00\\x05\\x00\\x04\\xc0\\x12\\xc0\\x08\\x00\\x16\\x00\\x13\\x00\\x10\\x00\\r\\xc0\\x17\\x00\\x1b\\xc0\\r\\xc0\\x03\\x00\\n\\x00\\x15\\x00\\x12\\x00\\x0f\\x00\\x0c\\x00\\x1a\\x00\\t\\x00\\x14\\x00\\x11\\x00\\x19\\x00\\x08\\x00\\x06\\x00\\x17\\x00\"]\n",
            "Bad pipe message: %s [b'\\x10\\xc0']\n",
            "Bad pipe message: %s [b'\\x15\\xc0\\x0b\\xc0\\x01']\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 9/15, Train Loss: 0.3851, Train Acc: 0.9102, Test Loss: 0.4114, Test Acc: 0.9100\n",
            "Epoch 10/15, Train Loss: 0.3749, Train Acc: 0.9129, Test Loss: 0.3958, Test Acc: 0.9131\n",
            "Epoch 11/15, Train Loss: 0.3674, Train Acc: 0.9155, Test Loss: 0.4026, Test Acc: 0.9126\n",
            "Epoch 12/15, Train Loss: 0.3607, Train Acc: 0.9167, Test Loss: 0.3905, Test Acc: 0.9140\n",
            "Epoch 13/15, Train Loss: 0.3545, Train Acc: 0.9182, Test Loss: 0.3809, Test Acc: 0.9175\n",
            "Epoch 14/15, Train Loss: 0.3486, Train Acc: 0.9196, Test Loss: 0.3914, Test Acc: 0.9129\n",
            "Epoch 15/15, Train Loss: 0.3438, Train Acc: 0.9211, Test Loss: 0.3810, Test Acc: 0.9160\n"
          ]
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1200x500 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Entrenar el modelo\n",
        "num_epochs = 15\n",
        "train_losses = []\n",
        "train_accuracies = []\n",
        "test_losses = []\n",
        "test_accuracies = []\n",
        "\n",
        "for epoch in range(num_epochs):\n",
        "    # Entrenamiento\n",
        "    model.train()\n",
        "    running_loss = 0.0\n",
        "    correct = 0\n",
        "    total = 0\n",
        "    for images, labels in train_loader:\n",
        "        optimizer.zero_grad()\n",
        "        outputs = model(images)\n",
        "        loss = criterion(outputs, labels.view(-1))\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "        running_loss += loss.item()\n",
        "        _, predicted = torch.max(outputs, 1)\n",
        "        total += labels.size(0)\n",
        "        correct += (predicted == labels.view(-1)).sum().item()\n",
        "\n",
        "    epoch_loss = running_loss / len(train_loader)\n",
        "    epoch_accuracy = correct / total\n",
        "    train_losses.append(epoch_loss)\n",
        "    train_accuracies.append(epoch_accuracy)\n",
        "\n",
        "    # Evaluación en el conjunto de validación\n",
        "    model.eval()\n",
        "    running_loss = 0.0\n",
        "    correct = 0\n",
        "    total = 0\n",
        "    with torch.no_grad():\n",
        "        for images, labels in validation_loader:\n",
        "            outputs = model(images)\n",
        "            loss = criterion(outputs, labels.view(-1))\n",
        "\n",
        "            running_loss += loss.item()\n",
        "            _, predicted = torch.max(outputs, 1)\n",
        "            total += labels.size(0)\n",
        "            correct += (predicted == labels.view(-1)).sum().item()\n",
        "\n",
        "    epoch_loss = running_loss / len(validation_loader)\n",
        "    epoch_accuracy = correct / total\n",
        "    test_losses.append(epoch_loss)\n",
        "    test_accuracies.append(epoch_accuracy)\n",
        "\n",
        "    print(f\"Epoch {epoch+1}/{num_epochs}, Train Loss: {train_losses[-1]:.4f}, Train Acc: {train_accuracies[-1]:.4f}, Test Loss: {test_losses[-1]:.4f}, Test Acc: {test_accuracies[-1]:.4f}\")\n",
        "\n",
        "# Guardar el modelo entrenado\n",
        "torch.save(model.state_dict(), 'simple_cnn_model.pth')\n",
        "\n",
        "# Crear la gráfica de pérdida y precisión\n",
        "plt.figure(figsize=(12, 5))\n",
        "\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.plot(range(1, num_epochs+1), train_losses, label='Training Loss')\n",
        "plt.plot(range(1, num_epochs+1), test_losses, label='Test Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.title('Loss Over Epochs')\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "\n",
        "plt.subplot(1, 2, 2)\n",
        "plt.plot(range(1, num_epochs+1), train_accuracies, label='Training Accuracy')\n",
        "plt.plot(range(1, num_epochs+1), test_accuracies, label='Test Accuracy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.title('Accuracy Over Epochs')\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 106,
      "metadata": {
        "id": "oulldVSfCiBw"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Nombre de lletres correctes: 17922\n",
            "Percentatge de lletres correctes: 91.59766942655627%\n"
          ]
        }
      ],
      "source": [
        "def compare_letter_pairs(true_labels, predicted_labels):\n",
        "    if len(true_labels) != len(predicted_labels):\n",
        "        raise ValueError(\"Les llistes han de tenir la mateixa longitud\")\n",
        "\n",
        "    total_pairs = len(true_labels)\n",
        "    same_letter_count = 0\n",
        "    total_letters = 0\n",
        "\n",
        "    for label1, label2 in zip(true_labels, predicted_labels):\n",
        "        if label1 == label2:\n",
        "            same_letter_count += 1\n",
        "\n",
        "        total_letters += 1\n",
        "\n",
        "    letter_percentage = (same_letter_count / total_letters) * 100\n",
        "\n",
        "    return same_letter_count, letter_percentage\n",
        "\n",
        "# Exemple d'ús amb les prediccions del model\n",
        "true_labels = []\n",
        "predicted_labels = []\n",
        "\n",
        "with torch.no_grad():\n",
        "    for images, labels in validation_generator:\n",
        "        outputs = model(images)\n",
        "        _, predicted = torch.max(outputs.data, 1)\n",
        "        true_labels.extend(labels.cpu().numpy())\n",
        "        predicted_labels.extend(predicted.cpu().numpy())\n",
        "\n",
        "same_letter_count, letter_percentage = compare_letter_pairs(true_labels, predicted_labels)\n",
        "print(f'Nombre de lletres correctes: {same_letter_count}')\n",
        "print(f'Percentatge de lletres correctes: {letter_percentage}%')"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.9"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
